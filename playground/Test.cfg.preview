# Erstellt aus https://github.com/facebook/graphql/blob/c88cc307c61ee1b6913183ae079cf97e8d109f5b/spec/Appendix%20B%20--%20Grammar%20Summary.md
# Benutzte Grammatik: 
# * https://github.com/JonasRudolph/idea-plugin-context-free-grammar/blob/master/src/codes/rudolph/idea/cfg/CFG.bnf
# * https://github.com/JonasRudolph/idea-plugin-context-free-grammar/blob/master/src/codes/rudolph/idea/cfg/CFG.flex

module A;

GraphQLDocument: {Definition};
Definition: OperationDefinition
           | FragmentDefinition
           | TypeSystemDefinition;



# DirectiveLocation: QUERY_DEFINITION, MUTATION_DEFINITION, SUBSCRIPTION_DEFINITION
OperationDefinition: [OperationType [OperationName] [VariableDefinitions] [Directives]] SelectionSet;
OperationName: Name;

VariableDefinitions: '(' {VariableDefinition} ')';
VariableDefinition: Variable ':' Type [DefaultValue];




SelectionSet: '{' {Selection} '}';
Selection: Field
          | FragmentSpread
          | InlineFragment;
# DirectiveLocation: FIELD_SELECTION
Field: [Alias ':'] FieldName [Arguments] [Directives] [SelectionSet];
Alias: Name;

# DirectiveLocation: FRAGMENT_SPREAD
FragmentSpread: '...' FragmentName [Directives] A1;
# DirectiveLocation: INLINE_FRAGMENT
InlineFragment: '...' [TypeCondition] [Directives] SelectionSet;



# DirectiveLocation: FRAGMENT_DEFINITION
FragmentDefinition: 'fragment' FragmentName TypeCondition [Directives] SelectionSet;
FragmentName: Name / 'on';
TypeCondition: 'on' NamedType;



TypeSystemDefinition: SchemaDefinition
                     | TypeDefinition
                     | TypeExtensionDefinition
                     | DirectiveDefinition;


# DirectiveLocation: SCHEMA_DEFINITION
SchemaDefinition: 'schema' [Directives] '{' { OperationType ':' NamedType } '}';
OperationType: 'query' | 'mutation' | 'subscription';



TypeDefinition: ScalarTypeDefinition
               | ObjectTypeDefinition
               | InterfaceTypeDefinition
               | UnionTypeDefinition
               | EnumTypeDefinition
               | InputObjectTypeDefinition;
# DirectiveLocation: SCALAR_DEFINITION
ScalarTypeDefinition: 'scalar' ScalarName [Directives];
ScalarName: NamedType;
# DirectiveLocation: INTERFACE_DEFINITION
InterfaceTypeDefinition: 'interface' InterfaceName [Directives] '{' {FieldDefinition} '}';
# DirectiveLocation: UNION_DEFINITION
UnionTypeDefinition: 'union' UnionName [Directives] '=' {NamedType $ '|'};
UnionName: NamedType;
# DirectiveLocation: ENUM_DEFINITION
# DirectiveLocation: ENUM_VALUE_DEFINITION
EnumTypeDefinition: 'enum' EnumName [Directives] '{' {EnumValue [Directives]} '}';
EnumName: NamedType;
# DirectiveLocation: INPUT_TYPE_DEFINITION
# DirectiveLocation: INPUT_FIELD_DEFINITION (inside InputValueDefinition)
InputObjectTypeDefinition: 'input' InputObjectTypeName [Directives] '{' {InputValueDefinition} '}';
InputObjectTypeName: NamedType;
TypeExtensionDefinition: 'extend' ObjectTypeDefinition;
# DirectiveLocation: TYPE_DEFINITION
ObjectTypeDefinition: 'type' ObjectTypeName ['implements' {InterfaceName}] [Directives] '{' {FieldDefinition} '}';
ObjectTypeName: NamedType;
InterfaceName: NamedType;
DirectiveDefinition: 'directive' '@' DirectiveName [ArgumentsDefinition] 'on' {DirectiveLocation $ '|'};
DirectiveLocation: 'QUERY_DEFINITION'
                  | 'MUTATION_DEFINITION'
                  | 'SUBSCRIPTION_DEFINITION' 
                  | 'FIELD_SELECTION'
                  | 'FRAGMENT_DEFINITION'
                  | 'FRAGMENT_SPREAD'
                  | 'INLINE_FRAGMENT'
                  | 'SCHEMA_DEFINITION'
                  | 'SCALAR_DEFINITION'
                  | 'TYPE_DEFINITION'
                  | 'INTERFACE_DEFINITION'
                  | 'UNION_DEFINITION'
                  | 'ENUM_DEFINITION'
                  | 'ENUM_VALUE_DEFINITION'
                  | 'INPUT_TYPE_DEFINITION'
                  | 'INPUT_FIELD_DEFINITION'
                  | 'ARGUMENT_DEFINITION'
                  | 'FIELD_DEFINITION';


# DirectiveLocation: FIELD_DEFINITION
FieldDefinition: FieldName [ArgumentsDefinition] ':' Type [Directives];


Type: NamedType
     | ListType
     | NonNullType;
NamedType: Name;     
ListType: '[' Type ']';
NonNullType: (NamedType | ListType) '!';



# DirectiveLocation: ARGUMENT_DEFINITION (inside InputValueDefinition)
ArgumentsDefinition: '(' {InputValueDefinition} ')';


# DirectiveLocation: INPUT_VALUE_DEFINITION
InputValueDefinition: FieldName ':' Type [DefaultValue] [Directives];
DefaultValue: '=' ConstantValue;



Directives: {'@' DirectiveName [Arguments]};
DirectiveName: Name;

Arguments: '(' {Argument} ')';
Argument: Name ':' Value;



Value: Variable
      | ScalarValue
      | ListValue
      | ObjectValue;
Variable: '$' Name;
ListValue: '[' {0> Value} ']';
ObjectValue: '{' {0> FieldName ':' Value} '}';

ConstantValue: ScalarValue
              | ConstantListValue
              | ConstantObjectValue;
ConstantListValue: '[' {0> ConstantValue} ']';
ConstantObjectValue: '{' {0> FieldName ':' ConstantValue} '}';
FieldName: Name;

ScalarValue: IntValue 
            | FloatValue 
            | StringValue 
            | BooleanValue 
            | NullValue 
            | EnumValue;

BooleanValue: 'true' | 'false';
NullValue: 'null';
EnumValue: Name / (BooleanValue | NullValue);



Name: (NameCharacter / Digit) {0> NameCharacter};
NameCharacter: '_' | 'A'-'Z' | 'a'-'z' | Digit;



StringValue: DoubleQuotes {StringCharacter} DoubleQuotes;
StringCharacter: SourceCharacter / (DoubleQuotes | Escape | LineTerminator)
                | Escape 'u' Hex Hex Hex Hex
                | Escape (DoubleQuotes | Escape | '/' | 'b' | 'f' | 'n' | 'r' | 't');

SourceCharacter: NewLine
                | Tab
                | CarriageReturn
                | UnicodeBasicMultilingualPlaneWithoutControlCharacters;
Tab: '\t' | \u000A;
UnicodeBasicMultilingualPlaneWithoutControlCharacters: \u0020-\uFFFF;
                
DoubleQuotes: '"';
Escape: '\\';

LineTerminator: NewLine
               | CarriageReturn [NewLine];
NewLine: '\n' | \u0009;
CarriageReturn: '\r' | \u000D;
               
Hex: Digit 
    | 'A'-'F' 
    | 'a'-'f';



FloatValue: IntValue '.' {Digit} [ExponentPart]
           | IntValue ExponentPart;
ExponentPart: ('e' | 'E') [('+' '-')] {Digit};



IntValue: ['-'] '0'
         | ['-'] (Digit / '0') {0> Digit};
Digit: '0'-'9';